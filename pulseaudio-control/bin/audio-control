#!/bin/env python3

import sys
import os
import subprocess
import yaml
import re
import hashlib

SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
CONFIG_DIR = os.path.realpath(os.path.join(SCRIPT_DIR, "..", "etc"))
SCRIPT_NAME = os.path.basename(sys.argv[0])

def main():
	if len(sys.argv) == 1:
		return usage()
	command = sys.argv[1]
	if command == 'change':
		return change()
	elif command == 'toggle':
		return toggle()
	return usage()

# Prints usage
def usage():
	print(f"""{SCRIPT_NAME} <COMMAND> [ARGS...]

This script switches or toggles pulseuadio sinks & sources.

Commands:
  * change - Changes sink & source to defined combination
             Usage:
               {SCRIPT_NAME} change <config> <combination>
  * toggle - Toggles sink & source to next combination
             Usage:
               {SCRIPT_NAME} toggle <config> <combination>
""")

# Switches to pulseaudio sink & source defined in given combination.
#
# $1 - Config name
# $2 - Combination name
def change():
	if len(sys.argv) != 4:
		return usage()
	return set_combination(sys.argv[2], sys.argv[3])

# Toggles pulseaudio sink & source to next combination.
#
# $1 - Config name
def toggle():
	if len(sys.argv) != 3:
		return usage()
	config_name = sys.argv[2]
	hexhash = pa_get_current_state_hash()
	index = config_get_hash_index(config_name, hexhash)
	new_index = 0 if index is None else index + 1
	combination_name = config_get_index_combination(config_name, new_index)
	set_combination(config_name, combination_name)

###############################################################################

# Switches to pulseaudio sink & source defined in given combination.
#
# $1 - Config name
# $2 - Combination name
def set_combination(config_name, combination_name):
	verify_config_exists(config_name)
	source_name = config_get_source(config_name, combination_name)

	# Try to move outputs to next source (in case it already exists), this
	# fixes Firefox stopping audio recording on profile switch
	try:
		pa_move_outputs_to_source(source_name)
	except RuntimeError:
		pass

	pa_set_profile(*config_get_profile(config_name, combination_name))
	pa_set_sink(config_get_sink(config_name, combination_name))
	pa_set_source(source_name)
	pa_set_source_volume(source_name, config_get_source_volume(config_name, combination_name))
	send_notification(config_name, combination_name)

def send_notification(config_name, combination_name):
	icon = config_get_icon(config_name, combination_name)
	message = config_get_message(config_name, combination_name)
	call_process(["notify-send", "-i", icon, "-u", "low", "Audio Control", message])

###############################################################################

def config_get_hash_index(config_name, hexhash):
	combinations = config_read(config_name)["combinations"]
	for i, key in enumerate(combinations.keys()):
		hash = build_hash(combinations[key]["sink"], combinations[key]["source"])
		if hash == hexhash:
			return i
	return None

def config_get_index_combination(config_name, index):
	combinations = config_read(config_name)["combinations"]
	if index >= len(combinations):
		index = 0
	for i, key in enumerate(combinations.keys()):
		if i == index:
			return key

# Returns selected combination's profile.
def config_get_profile(config_name, combination_name):
	value = config_read(config_name)["combinations"][combination_name].get("profile", None)
	return [None, None] if value is None else value.split(" ")

# Returns selected combination's sink name.
def config_get_sink(config_name, combination_name):
	return config_read(config_name)["combinations"][combination_name].get("sink", None)

# Returns selected combination's source name.
def config_get_source(config_name, combination_name):
	return config_read(config_name)["combinations"][combination_name].get("source", None)

# Returns selected combination's source volume.
def config_get_source_volume(config_name, combination_name):
	value = config_read(config_name)["combinations"][combination_name].get("source_volume", None)
	return None if value is None else f"{value}"

# Returns selected combination's icon name (used in DE notification).
def config_get_icon(config_name, combination_name):
	return config_read(config_name)["combinations"][combination_name].get("icon", None)

# Returns selected combination's message (used in DE notification).
def config_get_message(config_name, combination_name):
	return config_read(config_name)["combinations"][combination_name].get("message", None)

def config_read(config_name):
	with open(get_config_path(config_name), "r") as file:
		return yaml.safe_load(file)

# Returns absolute path to the config file.
def get_config_path(config_name):
	return os.path.join(CONFIG_DIR, f"{config_name}.yaml")

# Verifies that given config exists, and exits the script if not found.
def verify_config_exists(config_name):
	assert os.path.isfile(get_config_path(config_name)), f"Config {config_name} does not exist"

###############################################################################

def pa_get_current_state_hash():
	sink_name = pa_get_default_sink()
	source_name = pa_get_default_source()
	return build_hash(sink_name, source_name)

# Returns name of the current default (=fallback) sink.
def pa_get_default_sink():
	result = call_process(["pacmd", "list-sinks"])
	match = re.search(r"\* index: ([0-9]+)", result)
	index = match.group(1)
	result = call_process(["pactl", "list", "short", "sinks"])
	match = re.search(rf"^{index}\s+([^\s]+)", result, re.MULTILINE)
	return match.group(1)

def pa_get_default_source():
	result = call_process(["pacmd", "list-sources"])
	match = re.search(r"\* index: ([0-9]+)", result)
	index = match.group(1)
	result = call_process(["pactl", "list", "short", "sources"])
	match = re.search(rf"^{index}\s+([^\s]+)", result, re.MULTILINE)
	return match.group(1)

# Switches to pulseaudio profile (e.g. A2DP or HSP/HFP).
def pa_set_profile(card_name, profile_name):
	if card_name is None or profile_name is None:
		return
	call_process(["pactl", "set-card-profile", card_name, profile_name])

# Switches to pulseaudio sink (e.g. speakers).
def pa_set_sink(sink_name):
	if sink_name is None:
		return
	call_process(["pacmd", "set-default-sink", sink_name])
	result = call_process(["pacmd", "list-sink-inputs", sink_name])
	for line in result:
		match = re.search(r"^\s*index: ([0-9]+)", line, re.MULTILINE)
		if match:
			index = match.group(1)
			print(f"Moving input {index} to {sink_name}")
			call_process(["pacmd", "move-sink-input", index, sink_name])

# Switches to pulseaudio source (e.g. microphone).
def pa_set_source(source_name):
	if source_name is None:
		return
	call_process(["pacmd", "set-default-source", source_name])
	pa_move_outputs_to_source(source_name)

def pa_move_outputs_to_source(source_name):
	result = call_process(["pacmd", "list-source-outputs", source_name])
	for line in result:
		match = re.search(r"^\s*index: ([0-9]+)", line, re.MULTILINE)
		if match:
			index = match.group(1)
			print(f"Moving output {index} to {source_name}")
			call_process(["pacmd", "move-source-output", index, source_name])

# Sets source's volume.
def pa_set_source_volume(source_name, source_volume):
	if source_name is None or source_volume is None:
		return
	call_process(["pacmd", "set-source-volume", source_name, source_volume])

###############################################################################

def build_hash(sink_name, source_name):
	hash = hashlib.md5()
	hash.update(sink_name.encode('utf8'))
	hash.update(source_name.encode('utf8'))
	return hash.hexdigest()

def call_process(args):
	result = subprocess.run(args, capture_output=True)
	if (result.returncode != 0):
		raise RuntimeError(result.stderr.decode('utf8'))
	return result.stdout.decode('utf8')

sys.exit(main())
